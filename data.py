#!/usr/bin/env python

import urllib, json, urlparse

######
# Helvault
# File: data.py
# Author: Partidor
#
# data.py defines the Card class, as well as the all important CardSearch funtion
#
# Card data is retrieved from Scryfall as per the user's query.
# Shout out to Scryfall for their awesome service and API.
######

# Card - Class
# ------------
# Holds data associated with Magic the Gathering trading cards
#
# Field		Description
# -------------------------
# name		The Magic card's name
# set_name	The set that this card comes from
# oracle_text	The most current and correct Oracle Text (rules text) for the card
# s_img		The smallest image representation of the card on Scryfall
# l_img		The largest image representation of the card on Scryfall
#
# Functions
# ---------
# __init__	The Constructor for the Card Class
# 
class Card:
	name = ""
	set_name = ""
	oracle_text = ""
	s_img = None
	l_img = None

	def __init__(self, name, set_name, oracle_text, s_img, l_img):
		self.name = name
		self.set_name = set_name
		self.oracle_text = oracle_text
		self.s_img = s_img
		self.l_img = l_img

# CardSearch - Function
# ---------------------
# CardSearch takes a search query 'q' and returns a list of cards 'cardList'.
#
# CardSearch leverages the Scryfall search API, converting the user's query
# into a URL quoted string, and passing that string to the search API call.
# CardSearch then parses the returned data for Helvault's needs, and adds 
# the parsed data to Card objects, and stores those objects in a list.
#
# Parameters
# ----------
# String q		The User's plain text search query from Helvault
#
# Return
# ------
# List cardList		The list of Card objects generated by CardSearch
# 
def CardSearch(q):
	cardList = []

	# Example search API call to scryfall, used to reconstruct our search query
	url="https://api.scryfall.com/cards/search?q=c%3Awhite+cmc%3D1+t%3Acreature+f%3Apauper"
	parse =  urlparse.urlparse(url)

	# Quotes user's plain text search to be URL quoted
	user_url = urllib.quote(q, safe='')
	user_url=user_url.replace('%20', '+')
	user_url = 'q=' + user_url

	# Repackage search URL for Scryfall
	url=urlparse.urlunsplit((parse.scheme, parse.netloc, parse.path, user_url, parse.fragment))

	resp = urllib.urlopen(url)

	data = json.loads(resp.read())

	# Return empty list on search error
	if data['object'] == "error":
		return cardList

	for c in data['data']:
		cimage_small = ""
		cimage_large = ""
		ot = ""
		
		# Oracle text for double sided cards can be tricky. If
		# a double sided card is encountered, put both sides of it's
		# Oracle text on both cards for redundancy and ease of use.
		if 'oracle_text' in c:
			# Check to see whether or not our card has a mana cost. 
			# If so, append it to the end of the card's name for
			# Display purposes
			if c['mana_cost'] == "":
				l1 = c['name']
			else:
				l1 = c['name'] + ' - ' + c['mana_cost'] 
			l2 = c['type_line']
			ot =  l1 + '<br><br>' + l2 + '<br><br>' + c['oracle_text']
		else:
			try:
				text = c['card_faces'][0]['name'] + ' - ' + c['card_faces'][0]['mana_cost'] + '<br><br>' + c['card_faces'][0]['type_line'] + '<br><br>' + c['card_faces'][0]['oracle_text']
				text = text + '<br><br>' + c['card_faces'][1]['name'] + '<br><br>' + c['card_faces'][1]['type_line'] + '<br><br>' + c['card_faces'][1]['oracle_text']
				ot = text
			# If we get an unexpected result
			except:
				pass


		# Dealing with images, check to see if the card has two faces
		# If so, create two independant card objects per face, but use the
		# joined oracle text from above on both cards.
		if 'card_faces' in c:
			if 'image_uris' in c['card_faces'][0]:
				cimage_small = c['card_faces'][0]['image_uris']['normal']
				cimage_large = c['card_faces'][0]['image_uris']['png']
				aimage_small = c['card_faces'][1]['image_uris']['normal']
				aimage_large = c['card_faces'][1]['image_uris']['png']

				n = Card(c['name'], c['set'], ot, cimage_small, cimage_large)
				cardList.append(n)

				a = Card(c['name'], c['set'], ot, aimage_small, aimage_large)
				cardList.append(a)
				continue
			else:
				cimage_small = c['image_uris']['normal']
				cimage_large = c['image_uris']['png']
		else:
			cimage_small = c['image_uris']['normal']
			cimage_large = c['image_uris']['png']

		n = Card(c['name'], c['set'], ot, cimage_small, cimage_large)
		cardList.append(n)

	return cardList

# A debugging test if run as ./data.py
if __name__ == '__main__':
	print CardSearch("vance's blasting cannons")
